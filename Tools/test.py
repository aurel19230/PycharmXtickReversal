import numpy as np

# Exemple simplifié avec des sous-ensembles plus petits de vos données réelles
eval_results = [-1249.2, -1249.2, -1249.2, -1249.2, -1249.2, -1249.2, -1249.2, -1249.2, -1249.2, -1249.2, -1249.2, -1249.2, -1249.2, -1249.2, -1249.2, -1249.2, -1248.1, -1248.0, -1246.9, -1243.6, -1241.4, -1239.2, -1240.2, -1241.1, -1239.9, -1238.7, -1238.6, -1236.2, -1232.9, -1227.4, -1221.9, -1221.9, -1222.5, -1219.1, -1220.9, -1220.6, -1218.2, -1219.1, -1209.0, -1205.4, -1206.1, -1204.8, -1204.6, -1198.9, -1195.3, -1191.6, -1195.2, -1192.9, -1191.7, -1193.3, -1185.4, -1181.7, -1180.1, -1176.4, -1176.0, -1172.2, -1168.6, -1169.3, -1170.1, -1164.4, -1166.1, -1164.5, -1163.0, -1160.5, -1152.6, -1146.8, -1153.5, -1150.6, -1149.6, -1145.0, -1141.3, -1141.1, -1147.1, -1144.7, -1150.4, -1148.0, -1136.7, -1132.2, -1127.6, -1120.5, -1116.8, -1116.1, -1113.7, -1111.0, -1105.7, -1105.4, -1097.3, -1097.8, -1096.0, -1096.2, -1100.9, -1095.1, -1098.8, -1099.3, -1099.8, -1098.9, -1103.8, -1113.8, -1109.2, -1111.3, -1106.8, -1106.1, -1111.5, -1108.5, -1103.8, -1094.5, -1094.8, -1097.4, -1103.3, -1101.6, -1092.0, -1090.5, -1086.6, -1075.5, -1074.7, -1060.1, -1056.2, -1058.7, -1063.6, -1066.8, -1064.3, -1063.7, -1065.1, -1051.5, -1049.6, -1043.1, -1050.0, -1051.0, -1042.7, -1043.9, -1044.2, -1050.2, -1049.0, -1042.0, -1040.8, -1038.1, -1041.7, -1043.8, -1034.7, -1022.1, -1029.5, -1025.6, -1031.4, -1030.4, -1021.2, -1007.6, -987.4, -994.2, -993.5, -997.4, -988.0, -986.1, -976.0, -977.0, -975.6, -970.9, -967.6, -975.3, -973.6, -969.8, -975.6, -978.1, -975.1, -986.0, -982.2, -990.1, -978.6, -974.5, -981.4, -972.2, -989.0, -986.6, -984.9, -967.9, -957.1, -951.2, -947.7, -964.9, -965.0, -972.6, -949.2, -939.3, -939.3, -931.0, -935.3, -933.8, -931.4, -932.9, -934.5, -926.4, -912.3, -909.5, -902.9, -908.1, -922.0, -921.4, -930.7, -925.5, -923.1, -920.1, -918.6, -911.9, -909.5, -902.6, -891.0, -902.3, -893.6, -902.8, -882.5, -885.9, -890.4, -889.7, -881.7, -897.4, -894.6, -894.6, -888.2, -889.8, -894.5, -891.9, -898.9, -899.5, -897.6, -900.8, -906.5, -893.3, -893.5, -899.4, -899.9, -892.3, -883.4, -885.1, -874.1, -869.8, -875.5, -864.7, -865.2, -862.6, -857.7, -874.6, -888.3, -862.2, -871.1, -872.0, -875.7, -877.1, -876.9, -865.2, -861.2, -867.9, -868.9, -853.5, -857.9, -844.0, -853.4, -838.2, -842.1, -835.0, -838.5, -852.4, -856.8, -864.7, -850.5, -843.7, -836.6, -841.8, -838.2, -842.9, -838.3, -850.9, -848.1, -841.6, -843.0, -843.1, -831.4, -845.7, -841.6, -832.2, -834.7, -832.8, -840.1, -817.5, -808.9, -813.8, -809.3, -812.7, -814.1, -815.3, -808.5, -814.6, -810.5, -811.8, -809.3, -816.9, -820.8, -810.6, -815.6, -829.4, -829.8, -819.0, -820.3, -811.4, -812.1, -799.8, -792.8, -802.0, -806.1, -798.6, -785.8, -778.3, -793.8, -783.8, -784.3, -791.3, -814.0, -807.7, -815.6, -813.1, -801.7, -791.8, -795.0, -805.3, -802.1, -797.9, -788.2, -794.9, -799.2, -802.6, -809.9, -801.7, -799.0, -797.2, -808.0, -798.7, -794.1, -790.5, -773.9, -781.6, -786.5, -775.6, -781.4, -788.7, -786.9, -790.3, -796.1, -796.5, -785.0, -775.9, -776.9, -773.2, -781.6, -760.7, -780.9, -780.1, -776.2, -778.5, -778.4, -786.8, -773.7, -770.3, -776.2, -787.4, -786.9, -774.4, -775.8, -762.8, -755.9, -769.6, -750.0, -763.2, -752.0, -749.9, -741.1, -740.8, -743.4, -749.9, -742.8, -748.4, -742.2, -746.2, -747.6, -764.8, -758.0, -744.1, -752.1, -735.9, -759.4, -747.5, -743.8, -742.0, -741.0]


train_results = [-17448.6, -17448.6, -17448.6, -17448.6, -17448.6, -17448.6, -17448.6, -17448.6, -17448.6, -17448.6, -17448.6, -17448.6, -17448.6, -17448.6, -17448.6, -17444.2, -17436.5, -17423.2, -17408.7, -17383.1, -17347.5, -17306.6, -17267.4, -17197.5, -17148.3, -17090.3, -17052.6, -16999.7, -16935.0, -16890.6, -16835.1, -16789.2, -16719.0, -16647.0, -16565.0, -16515.9, -16450.5, -16378.9, -16300.5, -16222.0, -16144.8, -16091.6, -16048.3, -15972.1, -15899.3, -15867.3, -15805.7, -15743.5, -15698.8, -15647.2, -15602.5, -15567.9, -15523.8, -15438.0, -15376.3, -15310.9, -15270.1, -15217.5, -15151.0, -15089.6, -15026.5, -14955.2, -14905.6, -14869.1, -14826.2, -14784.9, -14746.1, -14677.9, -14626.6, -14571.2, -14533.3, -14496.9, -14440.9, -14369.3, -14311.2, -14256.8, -14179.3, -14100.7, -14045.2, -13981.7, -13919.3, -13806.9, -13761.5, -13681.6, -13567.7, -13487.0, -13409.8, -13333.0, -13242.9, -13164.0, -13099.4, -13044.7, -12957.4, -12894.2, -12805.2, -12749.3, -12635.7, -12566.1, -12490.5, -12437.1, -12346.1, -12241.6, -12126.9, -12047.5, -11970.4, -11873.9, -11777.2, -11656.3, -11566.5, -11487.8, -11400.0, -11294.5, -11206.4, -11095.8, -10993.5, -10893.3, -10795.9, -10730.2, -10623.8, -10507.8, -10381.7, -10265.8, -10147.1, -10017.7, -9895.8, -9741.2, -9661.2, -9578.5, -9454.1, -9357.7, -9254.9, -9162.2, -9037.6, -8997.4, -8862.3, -8763.1, -8620.0, -8497.8, -8398.3, -8281.6, -8175.2, -8077.3, -8022.4, -7925.9, -7802.6, -7666.2, -7559.2, -7454.8, -7365.7, -7271.8, -7131.8, -7061.6, -6924.6, -6824.9, -6729.0, -6666.8, -6556.1, -6436.1, -6354.0, -6251.0, -6146.4, -6091.1, -6047.1, -5954.4, -5869.1, -5799.2, -5688.0, -5596.6, -5488.5, -5407.1, -5334.4, -5281.7, -5217.9, -5170.4, -5070.4, -4937.5, -4842.3, -4751.5, -4643.4, -4593.1, -4460.5, -4336.1, -4233.8, -4105.7, -4037.3, -3912.9, -3823.6, -3776.6, -3672.1, -3552.2, -3474.1, -3429.3, -3311.2, -3234.4, -3113.9, -3068.6, -2949.3, -2850.8, -2794.9, -2707.1, -2548.5, -2491.3, -2394.6, -2314.5, -2232.3, -2140.8, -2015.2, -1943.4, -1845.1, -1764.0, -1698.5, -1644.0, -1594.0, -1498.1, -1375.6, -1295.5, -1245.0, -1162.2, -1124.3, -1089.2, -1023.8, -923.9, -808.7, -730.6, -627.2, -557.0, -489.5, -431.6, -377.8, -282.2, -191.8, -121.3, -63.1, 2.5, 148.8, 268.1, 427.7, 466.8, 501.5, 575.9, 685.5, 787.0, 886.5, 966.5, 1053.2, 1132.2, 1234.4, 1315.0, 1324.7, 1371.9, 1405.5, 1526.1, 1594.0, 1615.8, 1638.7, 1699.4, 1813.2, 1901.5, 1968.9, 2018.7, 2066.7, 2136.5, 2206.2, 2249.7, 2330.1, 2363.1, 2410.9, 2511.0, 2545.4, 2659.2, 2780.6, 2817.6, 2896.8, 2947.4, 3062.8, 3120.5, 3172.0, 3175.2, 3243.1, 3320.9, 3377.3, 3448.3, 3488.2, 3597.8, 3593.4, 3654.6, 3760.0, 3828.0, 3899.7, 3947.2, 4013.3, 4059.3, 4090.2, 4176.4, 4204.3, 4272.9, 4327.7, 4395.1, 4465.3, 4483.6, 4579.6, 4612.9, 4694.2, 4773.7, 4801.9, 4859.9, 4855.3, 4866.1, 4980.2, 5009.3, 5051.1, 5076.6, 5231.4, 5304.1, 5398.9, 5430.6, 5463.5, 5577.7, 5620.7, 5673.7, 5710.3, 5784.6, 5807.3, 5825.9, 5891.9, 5945.5, 5996.0, 6017.0, 6091.8, 6150.8, 6182.1, 6225.8, 6259.6, 6332.6, 6408.4, 6469.3, 6517.5, 6589.8, 6653.1, 6710.9, 6835.2, 6886.7, 6947.9, 7016.9, 7039.4, 7079.8, 7115.7, 7186.5, 7248.9, 7307.6, 7370.6, 7458.3, 7513.8, 7589.6, 7601.7, 7650.6, 7725.6, 7746.3, 7828.3, 7877.0, 7941.4, 7977.3, 8056.6, 8104.0, 8140.2, 8183.1, 8235.7, 8307.4, 8387.4, 8485.3, 8488.9, 8539.8, 8515.3, 8551.0, 8585.3, 8609.1, 8663.3, 8745.7, 8780.0, 8807.8, 8869.2, 8904.5, 8949.1, 8968.4, 8984.7, 9061.5, 9124.7, 9169.6, 9192.1, 9277.3, 9302.8]




# Trouver l'index où le score sur le jeu de validation est maximal
best_eval_index = np.argmax(eval_results)

# Meilleur score sur le jeu de validation (eval)
best_eval_score = eval_results[best_eval_index]

# Score d'entraînement (train) à la même itération que celle du meilleur score sur le jeu de validation
corresponding_train_score = train_results[best_eval_index]

# Afficher les résultats
print(f"Meilleur score sur le jeu de validation (eval) : {best_eval_score} à l'itération {best_eval_index}")
print(f"Score d'entraînement (train) à la même itération : {corresponding_train_score}")




